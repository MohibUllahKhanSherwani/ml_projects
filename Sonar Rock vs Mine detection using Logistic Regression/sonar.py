# -*- coding: utf-8 -*-
"""sonar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AHOC22vBZzBxZzjJmTHEvI_vEj6mWO1n
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

sonar_data = pd.read_csv('/content/sonar data.csv', header = None)

sonar_data.head()

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

x = sonar_data.drop(columns = 60, axis = 1) #seperating the last column from the rest

sonar_data.head()

y = sonar_data[60]

y.head()

print(x)
print(y)

#seperating test and train data for both the tables
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=1, stratify = y)

print(x.shape, x_train.shape, x_test.shape)
print(y.shape, y_train.shape, y_test.shape)

#using logistic regression model
model = LogisticRegression()

model.fit(x_train, y_train)

#accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_acc = accuracy_score(x_train_prediction, y_train) #compare what model predicted vs actual
print("Accuracy score:", training_data_acc)

#accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_acc = accuracy_score(x_test_prediction, y_test) #compare what model predicted vs actual
print("Accuracy score:", test_data_acc)

#making a predictive system
input_date = (0.0286,0.0453,0.0277,0.0174,0.0384,0.0990,0.1201,0.1833,0.2105,0.3039,0.2988,0.4250,0.6343,0.8198,1.0000,0.9988,0.9508,0.9025,0.7234,0.5122,0.2074,0.3985,0.5890,0.2872,0.2043,0.5782,0.5389,0.3750,0.3411,0.5067,0.5580,0.4778,0.3299,0.2198,0.1407,0.2856,0.3807,0.4158,0.4054,0.3296,0.2707,0.2650,0.0723,0.1238,0.1192,0.1089,0.0623,0.0494,0.0264,0.0081,0.0104,0.0045,0.0014,0.0038,0.0013,0.0089,0.0057,0.0027,0.0051,0.0062)

input_data_as_numpy_array = np.asarray(input_date)
#reshaping as we are predicting for one instance only
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 'R'):
  print("Its a rock")
else:
  print("Its a mine")

