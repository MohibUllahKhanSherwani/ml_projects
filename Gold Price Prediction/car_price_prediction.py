# -*- coding: utf-8 -*-
"""car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjtYDZuaj-TSdHJK8DvggziS0-C6oAhR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

car_data = pd.read_csv('/content/car data.csv')

car_data.head()

car_data.describe()

car_data.shape

car_data.info()

car_data.isnull().sum()

#Checking the distribution of categorical data
car_data['Fuel_Type'].value_counts()

car_data['Seller_Type'].value_counts()

car_data['Transmission'].value_counts()

#Encode this data
car_data.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
car_data.replace({'Seller_Type':{'Dealer':0,'Individual':1}}, inplace=True)
car_data.replace({'Transmission':{'Manual':0,'Automatic':1}}, inplace=True)

car_data.head()

#Seperate data and label
x = car_data.drop(['Car_Name', 'Selling_Price'], axis = 1)
y = car_data['Selling_Price']

print(x)

print(y)

#Training and test data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.05, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

#First train the model using linear regression
model1 = LinearRegression()

model1.fit(x_train, y_train)

#Evaluate LinearRegression Accuracy on training data
training_prediction = model1.predict(x_train)
error_score = metrics.r2_score(y_train, training_prediction)
print('Linear Regression accuracy on training data: ',error_score)

test_prediction = model1.predict(x_test)
error_score = metrics.r2_score(y_test, test_prediction)
print('Linear Regression accuracy on test data: ',error_score)

#Visualize predicted vs Actual prices on training data
plt.scatter(y_train, training_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

#Visualize predicted vs Actual prices on test data
plt.scatter(y_test, test_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

#Now using Lasso Regression
model2 = Lasso()

model2.fit(x_train, y_train)

training_prediction = model2.predict(x_train)
error_score = metrics.r2_score(y_train, training_prediction)
print('Lasso Regression accuracy on training data: ',error_score)

test_prediction = model2.predict(x_test)
error_score = metrics.r2_score(y_test, test_prediction)
print('Lasso Regression accuracy on test data: ',error_score)

plt.scatter(y_train, training_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

plt.scatter(y_test, test_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

