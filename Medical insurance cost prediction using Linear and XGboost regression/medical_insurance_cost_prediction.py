# -*- coding: utf-8 -*-
"""Medical insurance cost prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19jhXn9lUW2G_Gy_y1b5IvGFPRUC0ANZQ
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import xgboost as xgb
from sklearn.metrics import accuracy_score, r2_score
from sklearn import metrics

df = pd.read_csv('/content/insurance.csv')
df.head()

df['sex'].value_counts(), df['smoker'].value_counts(), df['region'].value_counts()

df.shape

df.describe()

df.info()

df.isnull().sum()

#There are 3 categorical columns --> sex, smoker, region
plt.figure(figsize=(4,4))
sns.displot(df['age'])
plt.title('Age Distribution')
plt.show()

#Gender column
plt.figure(figsize=(6,6))
sns.countplot(x = 'sex', data = df)
plt.title('Gender Distribution')
plt.show()

#Bmi column
plt.figure(figsize=(6,6))
sns.displot(df['bmi'])
plt.title('Age Distribution')
plt.show()

#charges column
plt.figure(figsize=(6,6))
sns.displot(df['charges'])
plt.title('Charges Distribution')
plt.show()

#label encoding the categorical columns
df.replace({'sex': {'male':0, 'female':1}}, inplace=True)
df.replace({'smoker': {'yes':0, 'no':1}}, inplace=True)
df.replace({'region':{'southeast':0, 'southwest':1, 'northeast':2, 'northwest':3}}, inplace=True)

df.head()

x = df.drop(['charges' ], axis=1)
y = df['charges']

print(x)

print(y)

#Seperate into training and testing data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2)

print(x_train.shape, x_test.shape, x.shape)

#Training the model
model = LinearRegression()
model.fit(x_train, y_train)

#Accuracy on training data
training_prediction = model.predict(x_train)
r2_train = metrics.r2_score(y_train, training_prediction)
print('Accuracy on training data ', r2_train)

test_prediction = model.predict(x_test)
r2_test = metrics.r2_score(y_test, test_prediction)
print('Accuracy on test data: ', r2_test)

xg = xgb.XGBRegressor()
xg.fit(x_train, y_train)

test_prediction = xg.predict(x_test)
r2_test = metrics.r2_score(y_test, test_prediction)
print('Accuracy on test data: ', r2_test)

training_prediction = xg.predict(x_train)
r2_train = metrics.r2_score(y_train, training_prediction)
print('R Squared value = ', r2_train)

