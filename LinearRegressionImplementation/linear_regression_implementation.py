# -*- coding: utf-8 -*-
"""Linear Regression Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18PTa2yKe2egjsYf8CsW_RnKJhQphby9Q
"""

import numpy as np

class Linear_Regression():
  # Initiating the hyperparameters
  def __init__(self, learning_rate, no_of_iters):
    self.learning_rate = learning_rate
    self.no_of_iters = no_of_iters
  def fit(self, x, y):
    # No. of training examples No. of features(columns)
    self.m, self.n = x.shape
    # Initializing weights
    self.w = np.zeros(self.n) # An array of zeros of size n(columns)
    # Initializing bias
    self.b = 0

    self.x = x
    self.y = y

    # Implementing gradient descent
    for i in range(self.no_of_iters):
      self.update_weights()

  def update_weights(self,):
    y_pred = self.predict(self.x)
    # Calculating gradients
    dw = -(2 * (self.x.T).dot(self.y - y_pred)) / self.m
    db = - 2 * np.sum(self.y - y_pred) / self.m
    # Updating weights
    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db
  def predict(self, x):
    # y = wX + b
    return x.dot(self.w) + self.b # dot product of (w and x) + b

import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

dataframe = pd.read_csv('/content/salary_data.csv')

dataframe

dataframe.head()

dataframe.isna().sum()

dataframe.info()

dataframe.describe()

dataframe.shape

x = dataframe.iloc[:, :-1].values
y = dataframe.iloc[:, -1].values

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

model = Linear_Regression(learning_rate=0.02, no_of_iters=1000)

model.fit(x_train, y_train)

print(model.b)

print(model.w)

# Salary = 9570(Experience) + 24384.02

test_prediction = model.predict(x_test)

print(test_prediction)

# Visualizing predicted and actual values

plt.scatter(x_test, y_test, color='red')
plt.plot(x_test, test_prediction, color='blue')
plt.title('Salary vs Experience (Test Set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

from sklearn import metrics
from sklearn.metrics import r2_score

r2_test = metrics.r2_score(y_test, test_prediction)
print(r2_test)

