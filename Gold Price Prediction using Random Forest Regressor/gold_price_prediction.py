# -*- coding: utf-8 -*-
"""gold price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-xzglWsfCIcgahx0eer7pJ2nVXNGRXDp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

gold_data = pd.read_csv('/content/gld_price_data.csv')

gold_data.head()

gold_data.shape

gold_data.describe()

gold_data.isnull().sum()

gold_data.info()

gold_data.tail()

#Find correlation between different columns
correlation = gold_data.drop('Date', axis = 1).corr()
plt.figure(figsize=(8,8))
sns.heatmap(correlation, annot=True, annot_kws={'size':8}, cmap='Blues', cbar=True, fmt = '.01f')
plt.show()

#Correlation values
print(correlation['GLD'])

#Check the distribution of the gold prices
sns.distplot(gold_data, color='b',x = gold_data['GLD'])
plt.show()

#Seperating data and label
x = gold_data.drop(['Date', 'GLD'], axis = 1)
y = gold_data['GLD']

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2,
                                                    random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

#Train the model
regressor=RandomForestRegressor(n_estimators=100)#n_estimators=no.of trees

regressor.fit(x_train, y_train)

#Evaluate the model
training_prediction = regressor.predict(x_train)
test_prediction = regressor.predict(x_test)

#R squared
r2_train = metrics.r2_score(y_train, training_prediction)
r2_test = metrics.r2_score(y_test, test_prediction)

print('R squared value for training data: ', r2_train)
print('R squared value for test data: ', r2_test)

#Compare actual vs  predicted values
y_test = list(y_test)
plt.plot(y_test, color = 'blue', label = 'Actual Value')
plt.plot(training_prediction, color = 'green', label = 'Predicted Value')
plt.title('Actual Vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('Gold Price')
plt.legend()
plt.show()

